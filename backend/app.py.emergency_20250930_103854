from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import FileResponse
import sqlite3
import os
from fastapi.middleware.cors import CORSMiddleware
import sync_gs
from fastapi.staticfiles import StaticFiles
from typing import Optional

app = FastAPI(
    title="Sistema de Inventario API",
    description="API optimizada para gesti√≥n de inventario con integraci√≥n Google Sheets",
    version="3.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configurar rutas de archivos est√°ticos
frontend_path = os.path.join(os.path.dirname(__file__), "..", "frontend")
app.mount("/frontend", StaticFiles(directory=frontend_path), name="frontend")

# Ruta directa para admin.html (SOLUCI√ìN AL PROBLEMA)
@app.get("/admin.html")
async def get_admin():
    """Servir el panel administrativo"""
    admin_file = os.path.join(os.path.dirname(__file__), "..", "frontend", "admin.html")
    if os.path.exists(admin_file):
        return FileResponse(admin_file)
    else:
        raise HTTPException(status_code=404, detail="Admin panel not found")

# Ruta ra√≠z que redirecciona al admin
@app.get("/")
async def root():
    """Ruta ra√≠z que redirecciona al panel administrativo"""
    return {"message": "Sistema de Inventario API v3.0", "admin_panel": "/admin.html", "docs": "/docs"}

# Endpoints para sincronizaci√≥n con Google Sheets
@app.post("/api/sync/pull")
def api_sync_pull(background_tasks: BackgroundTasks):
    """Importar datos desde Google Sheets"""
    try:
        background_tasks.add_task(sync_gs.pull_sheet_to_sqlite)
        return {"started": True, "action": "pull", "message": "Importaci√≥n iniciada"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error en sync pull: {str(e)}")

@app.post("/api/sync/push")  
def api_sync_push(background_tasks: BackgroundTasks):
    """Exportar datos a Google Sheets"""
    try:
        background_tasks.add_task(sync_gs.push_sqlite_to_sheet)
        return {"started": True, "action": "push", "message": "Exportaci√≥n iniciada"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error en sync push: {str(e)}")

# Endpoint principal de art√≠culos
@app.get("/api/articulos")
def get_articulos(q: Optional[str] = None):
    """Obtener todos los art√≠culos del inventario"""
    try:
        db_path = os.path.join(os.path.dirname(__file__), "inventario.db")
        
        # Crear base de datos si no existe
        if not os.path.exists(db_path):
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS articulos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nombre TEXT NOT NULL,
                    descripcion TEXT,
                    cantidad INTEGER DEFAULT 0,
                    precio REAL DEFAULT 0.0,
                    categoria TEXT,
                    ubicacion TEXT,
                    fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Insertar datos de ejemplo
            cursor.execute('''
                INSERT INTO articulos (nombre, descripcion, cantidad, precio, categoria, ubicacion)
                VALUES 
                ('Laptop Dell', 'Laptop Dell Inspiron 15', 5, 899.99, 'Tecnolog√≠a', 'Oficina A'),
                ('Mouse Inalambrico', 'Mouse √≥ptico inal√°mbrico', 25, 29.99, 'Accesorios', 'Almac√©n B'),
                ('Monitor 24"', 'Monitor LED 24 pulgadas', 8, 199.99, 'Tecnolog√≠a', 'Oficina A')
            ''')
            conn.commit()
            conn.close()
            
            # Reconectar para consulta
            conn = sqlite3.connect(db_path)
        else:
            conn = sqlite3.connect(db_path)
            
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        if q:
            cursor.execute("SELECT * FROM articulos WHERE nombre LIKE ? OR descripcion LIKE ?", 
                         ('%'+q+'%', '%'+q+'%'))
        else:
            cursor.execute("SELECT * FROM articulos")
            
        rows = [dict(r) for r in cursor.fetchall()]
        conn.close()
        
        return {
            "total": len(rows),
            "articulos": rows,
            "message": f"Se encontraron {len(rows)} art√≠culos"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener art√≠culos: {str(e)}")

# Endpoint para obtener estad√≠sticas
@app.get("/api/stats")
def get_stats():
    """Obtener estad√≠sticas del inventario"""
    try:
        db_path = os.path.join(os.path.dirname(__file__), "inventario.db")
        if not os.path.exists(db_path):
            return {"total_articulos": 0, "total_valor": 0, "categorias": 0}
            
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Total de art√≠culos
        cursor.execute("SELECT COUNT(*) as total FROM articulos")
        total_articulos = cursor.fetchone()[0]
        
        # Valor total del inventario
        cursor.execute("SELECT SUM(cantidad * precio) as total_valor FROM articulos")
        total_valor = cursor.fetchone()[0] or 0
        
        # Categor√≠as √∫nicas
        cursor.execute("SELECT COUNT(DISTINCT categoria) as categorias FROM articulos")
        categorias = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            "total_articulos": total_articulos,
            "total_valor": round(total_valor, 2),
            "categorias": categorias,
            "status": "ok"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener estad√≠sticas: {str(e)}")

# Health check endpoint
@app.get("/health")
def health_check():
    """Verificar estado del sistema"""
    return {
        "status": "healthy",
        "version": "3.0.0",
        "database": "connected" if os.path.exists(os.path.join(os.path.dirname(__file__), "inventario.db")) else "not_found",
        "message": "Sistema funcionando correctamente"
    }


# ================================================================
# FUNCIONALIDADES AVANZADAS DE CONSULTA - AGREGADAS INCREMENTALMENTE
# ================================================================

from typing import Dict, Any
import gspread
from google.oauth2.service_account import Credentials
import os
from fastapi import Query as FastAPIQuery
from dotenv import load_dotenv

# Configuraci√≥n Google Sheets (si est√° disponible)
GOOGLE_SHEET_ID = "1tCILvM3VkaACJMNnTZu4ZYM3x81HcoTlg6uoj-K6RRQ"
CREDENTIALS_PATH = "backend/credentials.json"

def get_google_sheet_data():
    """Obtener TODOS los datos reales de Google Sheets"""
    try:
        # Cargar variables de entorno
        if os.path.exists('.env'):
            from dotenv import load_dotenv
import re
            load_dotenv()
        
        sheet_id = os.getenv('GOOGLE_SHEET_ID', '1tCILvM3VkaACJMNnTZu4ZYM3x81HcoTlg6uoj-K6RRQ')
        credentials_path = os.getenv('GOOGLE_CREDENTIALS_PATH', 'backend/credentials.json')
        
        print(f"üîç Conectando con Google Sheets...")
        print(f"   Sheet ID: {sheet_id}")
        
        # Verificar archivos necesarios
        if not os.path.exists(credentials_path):
            print(f"‚ùå Credenciales no encontradas: {credentials_path}")
            return generar_datos_ejemplo_minimo()
        
        # Configurar Google Sheets API
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/drive.readonly"
        ]
        
        creds = Credentials.from_service_account_file(credentials_path, scopes=scopes)
        client = gspread.authorize(creds)
        
        # Abrir Google Sheet
        sheet = client.open_by_key(sheet_id)
        print(f"‚úÖ Sheet abierto: {sheet.title}")
        
        # Obtener TODAS las hojas y sus datos
        articulos_totales = []
        
        for worksheet in sheet.worksheets():
            print(f"üìä Procesando hoja: {worksheet.title}")
            
            try:
                # Obtener todos los valores de la hoja
                all_values = worksheet.get_all_values()
                
                if len(all_values) <= 1:
                    print(f"   ‚ö†Ô∏è Hoja {worksheet.title} vac√≠a o solo encabezados")
                    continue
                
                headers = all_values[0]
                data_rows = all_values[1:]
                
                print(f"   üìà Filas de datos: {len(data_rows)}")
                
                # Procesar cada fila
                for i, row in enumerate(data_rows):
                    try:
                        # Asegurar que la fila tenga suficientes columnas
                        while len(row) < len(headers):
                            row.append("")
                        
                        # Crear diccionario para la fila
                        row_dict = {}
                        for j, header in enumerate(headers):
                            if j < len(row):
                                row_dict[header] = row[j]
                            else:
                                row_dict[header] = ""
                        
                        # Extraer datos principales
                        placa = str(row_dict.get("Placa", "")).strip()
                        
                        # CRITERIO M√ÅS PERMISIVO: incluir cualquier registro con placa
                        if not placa or placa.lower() in ['', 'nan', 'none', '0', 'null', 'placa']:
                            continue
                        
                        # Datos b√°sicos
                        desc_actual = str(row_dict.get("Descripci√≥n Actual", "")).strip()
                        marca = str(row_dict.get("Marca", "")).strip()
                        modelo = str(row_dict.get("Modelo", "")).strip()
                        
                        # Construcci√≥n del nombre
                        nombre_completo = desc_actual
                        if marca and marca.upper() not in ['NA', 'N/A', '.', '', 'NAN', 'NULL']:
                            nombre_completo += f" {marca}"
                        if modelo and modelo.upper() not in ['NA', 'N/A', '.', '', 'NAN', 'NULL']:
                            nombre_completo += f" {modelo}"
                        
                        # Valor monetario
                        valor_bruto = str(row_dict.get("Valor Ingreso", "0"))
                        valor_limpio = re.sub(r'[^0-9.,]', '', valor_bruto.replace(',', ''))
                        try:
                            valor_numerico = float(valor_limpio) if valor_limpio else 0
                        except:
                            valor_numerico = 0
                        
                        # Determinar responsable
                        responsable = "Sin asignar"
                        
                        # Buscar responsable en m√∫ltiples campos
                        campos_responsable = ["Centro/R", "Responsable", "Custodio", "Usuario"]
                        for campo in campos_responsable:
                            if campo in row_dict and row_dict[campo].strip():
                                texto_resp = str(row_dict[campo]).strip()
                                if texto_resp not in ['76,922710', '76.922710', '', 'NA', 'N/A']:
                                    responsable = texto_resp
                                    break
                        
                        # Si no encontr√≥ responsable, buscar nombres conocidos en toda la fila
                        if responsable == "Sin asignar":
                            nombres_conocidos = [
                                "ALVAREZ DIAZ JUAN GONZALO",
                                "MANTILLA ARENAS WILLIAM", 
                                "ALEXANDER ZAPATA TORO",
                                "LOPEZ HERRERA OSCAR ANTONIO",
                                "DOSSMAN MARQUEZ NOHORA LILIANA",
                                "ARIAS FIGUEROA JAIME DIEGO"
                            ]
                            
                            fila_texto = " ".join(str(v) for v in row_dict.values()).upper()
                            for nombre in nombres_conocidos:
                                if any(parte in fila_texto for parte in nombre.split()):
                                    responsable = nombre
                                    break
                        
                        # Crear art√≠culo
                        articulo = {
                            "id": placa,
                            "placa": placa,
                            "nombre": nombre_completo.strip() or desc_actual or "Art√≠culo sin nombre",
                            "marca": marca if marca.upper() not in ['NA', 'N/A', '.', 'NAN'] else "",
                            "modelo": modelo if modelo.upper() not in ['NA', 'N/A', '.', 'NAN'] else "",
                            "categoria": desc_actual or "Sin categor√≠a",
                            "descripcion": str(row_dict.get("Atributos", desc_actual)).strip() or desc_actual,
                            "valor": str(valor_numerico),
                            "fecha_adquisicion": str(row_dict.get("Fecha Adquisici√≥n", "")).strip(),
                            "ubicacion": str(row_dict.get("Ubicaci√≥n", "Sin ubicaci√≥n")).strip(),
                            "responsable": responsable,
                            "observaciones": str(row_dict.get("Observaciones", "")).strip(),
                            "consecutivo": str(row_dict.get("Consec.", "")).strip(),
                            "tipo_elemento": str(row_dict.get("Tipo", "")).strip(),
                            "hoja_origen": worksheet.title
                        }
                        
                        # Agregar art√≠culo (criterio muy permisivo)
                        articulos_totales.append(articulo)
                        
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è Error procesando fila {i+1}: {e}")
                        continue
                
                print(f"   ‚úÖ Procesados {len([a for a in articulos_totales if a.get('hoja_origen') == worksheet.title])} art√≠culos de {worksheet.title}")
                
            except Exception as e:
                print(f"   ‚ùå Error procesando hoja {worksheet.title}: {e}")
                continue
        
        print(f"üéâ TOTAL PROCESADO: {len(articulos_totales)} art√≠culos de todas las hojas")
        
        # Si no se obtuvieron art√≠culos, mostrar datos m√≠nimos
        if not articulos_totales:
            print("‚ö†Ô∏è No se encontraron art√≠culos v√°lidos, usando datos m√≠nimos")
            return generar_datos_ejemplo_minimo()
        
        return articulos_totales
        
    except gspread.exceptions.SpreadsheetNotFound:
        print("‚ùå Google Sheet no encontrado - verificar permisos")
        return generar_datos_ejemplo_minimo()
        
    except gspread.exceptions.APIError as e:
        print(f"‚ùå Error API Google Sheets: {e}")
        return generar_datos_ejemplo_minimo()
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")
        print(f"üîÑ Usando datos de ejemplo")
        return generar_datos_ejemplo_minimo()

def generar_datos_ejemplo_minimo():
    """Datos m√≠nimos de respaldo si Google Sheets falla"""
    return [
        {
            "id": "NO_SHEETS",
            "placa": "NO_SHEETS",
            "nombre": "‚ö†Ô∏è GOOGLE SHEETS NO CONECTADO",
            "marca": "SISTEMA",
            "modelo": "ERROR",
            "categoria": "ERROR DE CONEXI√ìN",
            "descripcion": "No se pudo conectar con Google Sheets. Verificar credenciales y permisos.",
            "valor": "0",
            "fecha_adquisicion": "2025-01-01",
            "ubicacion": "Sistema",
            "responsable": "ADMINISTRADOR",
            "observaciones": "Revisar configuraci√≥n de Google Sheets API",
            "consecutivo": "000",
            "tipo_elemento": "ERROR",
            "hoja_origen": "Sistema"
        }
    ]

# NUEVOS ENDPOINTS DE CONSULTA AVANZADA

@app.get("/api/inventario/consulta")
async def consulta_inventario(
    page: int = FastAPIQuery(1, ge=1, description="N√∫mero de p√°gina"),
    limit: int = FastAPIQuery(50, ge=1, le=500, description="Art√≠culos por p√°gina"),
    categoria: str = FastAPIQuery(None, description="Filtrar por categor√≠a"),
    responsable: str = FastAPIQuery(None, description="Filtrar por responsable"),
    marca: str = FastAPIQuery(None, description="Filtrar por marca"),
    fecha_desde: str = FastAPIQuery(None, description="Fecha desde (YYYY-MM-DD)"),
    fecha_hasta: str = FastAPIQuery(None, description="Fecha hasta (YYYY-MM-DD)"),
    valor_min: float = FastAPIQuery(None, description="Valor m√≠nimo"),
    valor_max: float = FastAPIQuery(None, description="Valor m√°ximo")
):
    """Consulta paginada del inventario con filtros avanzados"""
    try:
        # Obtener todos los datos
        todos_articulos = get_google_sheet_data()
        
        # Aplicar filtros
        articulos_filtrados = todos_articulos
        
        if categoria:
            articulos_filtrados = [a for a in articulos_filtrados if categoria.lower() in a.get("categoria", "").lower()]
        
        if responsable:
            articulos_filtrados = [a for a in articulos_filtrados if responsable.lower() in a.get("responsable", "").lower()]
            
        if marca:
            articulos_filtrados = [a for a in articulos_filtrados if marca.lower() in a.get("marca", "").lower()]
        
        if fecha_desde:
            articulos_filtrados = [a for a in articulos_filtrados if a.get("fecha_adquisicion", "") >= fecha_desde]
            
        if fecha_hasta:
            articulos_filtrados = [a for a in articulos_filtrados if a.get("fecha_adquisicion", "") <= fecha_hasta]
            
        if valor_min is not None:
            articulos_filtrados = [a for a in articulos_filtrados if float(a.get("valor", "0")) >= valor_min]
            
        if valor_max is not None:
            articulos_filtrados = [a for a in articulos_filtrados if float(a.get("valor", "0")) <= valor_max]
        
        # Paginaci√≥n
        total = len(articulos_filtrados)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        articulos_pagina = articulos_filtrados[start_idx:end_idx]
        
        return {
            "articulos": articulos_pagina,
            "total": total,
            "page": page,
            "limit": limit,
            "total_pages": (total + limit - 1) // limit,
            "has_next": end_idx < total,
            "has_prev": page > 1
        }
        
    except Exception as e:
        return {
            "error": f"Error consultando inventario: {str(e)}",
            "articulos": [],
            "total": 0
        }

@app.get("/api/inventario/buscar")
async def buscar_inventario(
    q: str = FastAPIQuery(..., description="Texto a buscar"),
    campos: str = FastAPIQuery("nombre,marca,modelo,descripcion", description="Campos donde buscar"),
    limit: int = FastAPIQuery(20, ge=1, le=100)
):
    """B√∫squeda por texto libre en el inventario"""
    try:
        todos_articulos = get_google_sheet_data()
        campos_buscar = campos.split(",")
        
        resultados = []
        for articulo in todos_articulos:
            # Buscar en los campos especificados
            texto_buscar = ""
            for campo in campos_buscar:
                if campo in articulo:
                    texto_buscar += f" {articulo[campo]}"
            
            if q.lower() in texto_buscar.lower():
                resultados.append(articulo)
                
            if len(resultados) >= limit:
                break
                
        return {
            "query": q,
            "campos": campos_buscar,
            "resultados": resultados,
            "total_encontrados": len(resultados)
        }
        
    except Exception as e:
        return {
            "error": f"Error en b√∫squeda: {str(e)}",
            "resultados": []
        }

@app.get("/api/inventario/categorias")
async def get_categorias():
    """Obtener lista de categor√≠as disponibles"""
    try:
        articulos = get_google_sheet_data()
        categorias = set()
        
        for articulo in articulos:
            if articulo.get("categoria"):
                categorias.add(articulo["categoria"])
        
        return {
            "categorias": sorted(list(categorias)),
            "total": len(categorias)
        }
        
    except Exception as e:
        return {
            "error": f"Error obteniendo categor√≠as: {str(e)}",
            "categorias": []
        }

@app.get("/api/inventario/responsables")
async def get_responsables():
    """Obtener lista de responsables"""
    try:
        articulos = get_google_sheet_data()
        responsables = set()
        
        for articulo in articulos:
            if articulo.get("responsable"):
                responsables.add(articulo["responsable"])
        
        return {
            "responsables": sorted(list(responsables)),
            "total": len(responsables)
        }
        
    except Exception as e:
        return {
            "error": f"Error obteniendo responsables: {str(e)}",
            "responsables": []
        }

@app.get("/api/inventario/estadisticas")
async def get_estadisticas():
    """Dashboard con estad√≠sticas del inventario"""
    try:
        articulos = get_google_sheet_data()
        
        # C√°lculos estad√≠sticos
        total_articulos = len(articulos)
        valor_total = sum(float(a.get("valor", "0")) for a in articulos)
        
        # Categor√≠as m√°s comunes
        categorias = {}
        for articulo in articulos:
            cat = articulo.get("categoria", "Sin categor√≠a")
            categorias[cat] = categorias.get(cat, 0) + 1
        
        # Responsables
        responsables = {}
        for articulo in articulos:
            resp = articulo.get("responsable", "Sin asignar")
            responsables[resp] = responsables.get(resp, 0) + 1
        
        # Top 5 de cada uno
        top_categorias = sorted(categorias.items(), key=lambda x: x[1], reverse=True)[:5]
        top_responsables = sorted(responsables.items(), key=lambda x: x[1], reverse=True)[:5]
        
        return {
            "resumen": {
                "total_articulos": total_articulos,
                "valor_total_inventario": valor_total,
                "total_categorias": len(categorias),
                "total_responsables": len(responsables)
            },
            "top_categorias": [{"categoria": k, "cantidad": v} for k, v in top_categorias],
            "top_responsables": [{"responsable": k, "cantidad": v} for k, v in top_responsables],
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {
            "error": f"Error generando estad√≠sticas: {str(e)}",
            "resumen": {"total_articulos": 0}
        }

@app.get("/api/inventario/{placa}/detalle")
async def get_detalle_articulo(placa: str):
    """Obtener detalle completo de un art√≠culo por su placa"""
    try:
        articulos = get_google_sheet_data()
        
        for articulo in articulos:
            if articulo.get("placa") == placa or articulo.get("id") == placa:
                return {
                    "articulo": articulo,
                    "encontrado": True
                }
        
        return {
            "error": f"Art√≠culo con placa {placa} no encontrado",
            "encontrado": False
        }
        
    except Exception as e:
        return {
            "error": f"Error obteniendo detalle: {str(e)}",
            "encontrado": False
        }

# Endpoint mejorado de sincronizaci√≥n
@app.post("/api/sync/pull")
async def sync_pull_mejorado():
    """Sincronizaci√≥n mejorada desde Google Sheets"""
    try:
        articulos = get_google_sheet_data()
        
        return {
            "message": "Sincronizaci√≥n exitosa",
            "articulos_sincronizados": len(articulos),
            "timestamp": datetime.now().isoformat(),
            "estado": "ok"
        }
        
    except Exception as e:
        return {
            "message": f"Error en sincronizaci√≥n: {str(e)}",
            "articulos_sincronizados": 0,
            "estado": "error"
        }



